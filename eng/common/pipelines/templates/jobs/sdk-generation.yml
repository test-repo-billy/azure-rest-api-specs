parameters:
  - name: SpecRepourl
    type: string
  - name: SpecRepoBranch
    type: string
    default: 'main'
  - name: SpecRepoCommit
    type: string
    default: 'HEAD'
  - name: SdkRepoUrl
    type: string
  - name: SdkRepoBranch
    type: string
    default: 'main'
  - name: ConfigType
    type: string
    values:
      - 'TypeSpec'
      - 'AutoRest'
  - name: TspConfigPath
    type: string
  - name: ReadmePath
    type: string
  - name: ApiVersion
    type: string
    default: 'not-specified'
  - name: CodePushRequired
    type: boolean
  - name: SdkPrRequired
    type: boolean

jobs:
- job:
  displayName: 'SDK Generation'
  variables:
    - template: /eng/pipelines/templates/variables/image.yml
    - name: NodeVersion
      value: '22.13.x'
    - name: PythonVersion
      value: '3.13'
    - name: SdkArtifactName
      value: SDK_Artifact
    - name: CodePushRequiredVar
      value: ${{ parameters.CodePushRequired }}
    - name: SdkPrRequiredVar
      value: ${{ parameters.SdkPrRequired }}
  pool:
    name: $(LINUXPOOL)
    vmImage: $(LINUXVMIMAGE)

  steps:
    - checkout: none

    - pwsh: |
        $urlPattern = '^https://github\.com/(?<organization>[^/]+)/(?<repository>[^/]+)'
        if ('${{ parameters.SpecRepoUrl }}' -match $urlPattern) {
          $specRepoOwner = $Matches['organization']
          $specRepoName = $Matches['repository']
        }
        # Check if the build reason is a pull request
        if ($env:BUILD_REASON -eq 'PullRequest') {
          $repository = $env:BUILD_REPOSITORY_NAME
          $repoInfo = $repository -split '/'
          $specRepoOwner = $repoInfo[0]
          $specRepoName = $repoInfo[1]
          $specRepoBranchVar = $env:BUILD_SOURCEBRANCH
          $CodePushRequiredVar = 'true'
          $SdkPrRequiredVar = 'true'
          Write-Host "##vso[task.setvariable variable=BreakingChangeLabel]BreakingChange-Go-Sdk"
          Write-Host "BreakingChangeLabel variable set to: BreakingChange-Go-Sdk"
        } else {
          $specRepoBranchVar = '${{ parameters.SpecRepoBranch }}'
        }
        Write-Host "##vso[task.setvariable variable=SpecRepoOwner]$specRepoOwner"
        Write-Host "SpecRepoOwner variable set to: $specRepoOwner"
        Write-Host "##vso[task.setvariable variable=SpecRepoBranchVar]$specRepoBranchVar"
        Write-Host "SpecRepoBranchVar variable set to: $specRepoBranchVar"

        Write-Host "##vso[task.setvariable variable=SpecRepoName]$specRepoName"
        Write-Host "SpecRepoName variable set to: $specRepoName"

        $specRepoDirectory = "$(System.DefaultWorkingDirectory)/$specRepoName"
        Write-Host "##vso[task.setvariable variable=SpecRepoDirectory]$specRepoDirectory"
        Write-Host "SpecRepoDirectory variable set to: $specRepoDirectory"

        if ('${{ parameters.SdkRepoUrl }}' -match $urlPattern) {
          $sdkRepoOwner = $Matches['organization']
          Write-Host "##vso[task.setvariable variable=SdkRepoOwner]$sdkRepoOwner"
          Write-Host "SdkRepoOwner variable set to: $sdkRepoOwner"

          $sdkRepoName = $Matches['repository']
          Write-Host "##vso[task.setvariable variable=SdkRepoName]$sdkRepoName"
          Write-Host "SdkRepoName variable set to: $sdkRepoName"

          $sdkRepoDirectory = "$(System.DefaultWorkingDirectory)/$sdkRepoName"
          Write-Host "##vso[task.setvariable variable=SdkRepoDirectory]$sdkRepoDirectory"
          Write-Host "SdkRepoDirectory variable set to: $sdkRepoDirectory"
        }

        if ([string]::IsNullOrEmpty($SpecRepoOwner) -or [string]::IsNullOrEmpty($SpecRepoName) -or [string]::IsNullOrEmpty($SdkRepoOwner) -or [string]::IsNullOrEmpty($SdkRepoName)) {
          Write-Host "One or more required variables are null or empty. Ensure that SpecRepourl and SdkRepoUrl are set to valid GitHub repository URLs."
          Exit 1
        }

        $sdkRepoNameForSpecGen = $sdkRepoName
        if ($sdkRepoName.EndsWith('-for-net')) {
          $sdkRepoNameForSpecGen = $sdkRepoName + "-track2"
        }
        Write-Host "##vso[task.setvariable variable=SdkRepoNameForSpecGen]$sdkRepoNameForSpecGen"
        Write-Host "SdkRepoNameForSpecGen variable set to: $sdkRepoNameForSpecGen"
      displayName: "Create Run Time Variables"

    - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
      parameters:
        Paths:
        - '/*'
        - '!sdk/**/test-recordings/*'
        - '!sdk/**/recordings/*'
        - '!sdk/**/SessionRecords/*'
        - '!sdk/**/session-records/*'
        Repositories:
        - Name: $(SpecRepoOwner)/$(SpecRepoName)
          Commitish: $(SpecRepoBranchVar)
          WorkingDirectory: $(SpecRepoDirectory)
        - Name: $(SdkRepoOwner)/$(SdkRepoName)
          Commitish: ${{ parameters.SdkRepoBranch }}
          WorkingDirectory: $(SdkRepoDirectory)
        SkipCheckoutNone: true

    - script: |
        if [ "${{ parameters.SpecRepoCommit }}" = "HEAD" ]; then
          cd $(SpecRepoDirectory)
          default_commit=$(git rev-parse HEAD)
          echo "##vso[task.setvariable variable=SpecRepoCommit]$default_commit"
          echo "SpecRepoCommit variable set to default commit: $default_commit"
        else
          echo "##vso[task.setvariable variable=SpecRepoCommit]${{ parameters.SpecRepoCommit }}"
          echo "SpecRepoCommit variable set to: ${{ parameters.SpecRepoCommit }}"
        fi
      displayName: 'Set SpecRepoCommit variable'

    - task: NodeTool@0
      inputs:
        versionSpec: $(NodeVersion)
      displayName: 'Install Node.js'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PythonVersion)

    - script: |
        npm install -g @azure-tools/spec-gen-sdk
      displayName: 'Install spec-gen-sdk'

    - task: PowerShell@2
      displayName: Write label to the spec PR
      condition: and(ne(variables['BreakingChangeLabel'], ''), eq(variables['Build.Reason'], 'PullRequest'))
      inputs:
        pwsh: true
        workingDirectory: $(SdkRepoDirectory)
        filePath: $(SdkRepoDirectory)/eng/common/scripts/Add-IssueLabels.ps1
        arguments: >
          -RepoOwner $(SpecRepoOwner)
          -RepoName $(SpecRepoName)
          -IssueNumber "$(System.PullRequest.PullRequestNumber)"
          -Labels $(BreakingChangeLabel)
          -AuthToken "$(azuresdk-github-pat)"

    - script: |
        optional_params=""
        sdk_gen_info="sdk generation from Config : "

        if [ "${{ parameters.ConfigType }}" = "TypeSpec" ]; then
          optional_params="$optional_params --tsp-config-relative-path ${{ parameters.TspConfigPath }}"
          sdk_gen_info="$sdk_gen_info '${{ parameters.TspConfigPath }}',"
        else
          optional_params="$optional_params --readme-relative-path ${{ parameters.ReadmePath }}"
          sdk_gen_info="$sdk_gen_info '${{ parameters.ReadmePath }}',"
        fi
        if [ "${{ parameters.ApiVersion }}" != "not-specified" ]; then
          optional_params="$optional_params --api-version ${{ parameters.ApiVersion }}"
          sdk_gen_info="$sdk_gen_info API Version: '${{ parameters.ApiVersion }}',"
        fi

        sdk_gen_info="$sdk_gen_info and CommitSHA: '$(SpecRepoCommit)'"
        echo "##vso[task.setvariable variable=GeneratedSDKInformation]$sdk_gen_info"
        echo "Generated SDK Information : $sdk_gen_info"

        spec-gen-sdk \
          --scp "$(SpecRepoDirectory)" \
          --sdp "$(SdkRepoDirectory)" \
          --wf "$(System.DefaultWorkingDirectory)" \
          -l "$(SdkRepoNameForSpecGen)" \
          -c "$(SpecRepoCommit)" \
          -t $true \
          $optional_params
      displayName: 'Generate SDK'

    - task: PublishPipelineArtifact@1
      displayName: Publish SDK ${sdkLanguage} Artifact to Pipeline Artifacts
      inputs:
        artifactName: $(sdkArtifactName)
        targetPath: "$(System.DefaultWorkingDirectory)/generatedSdkArtifacts"

    - ${{ if eq(variables['CodePushRequiredVar'], 'true') }}:
      - template: /eng/common/pipelines/templates/steps/git-push-changes.yml
        parameters:
          BaseRepoBranch: $(PrBranch)-$(Build.BuildId)
          BaseRepoOwner: azure-sdk
          CommitMsg: $(GeneratedSDKInformation)
          TargetRepoOwner: $(SdkRepoOwner)
          TargetRepoName: $(SdkRepoName)
          PushArgs: "--force"
          WorkingDirectory: $(SdkRepoDirectory)
          ScriptDirectory: $(SdkRepoDirectory)/eng/common/scripts

      - task: PowerShell@2
        displayName: Create pull request
        condition: and(succeeded(), eq(variables['SdkPrRequiredVar'], 'true'), eq(variables['HasChanges'], 'true'))
        inputs:
          pwsh: true
          workingDirectory: $(SdkRepoDirectory)
          filePath: $(SdkRepoDirectory)/eng/common/scripts/Submit-PullRequest.ps1
          arguments: >
            -RepoOwner "$(SdkRepoOwner)"
            -RepoName "$(SdkRepoName)"
            -BaseBranch "main"
            -PROwner "azure-sdk"
            -PRBranch "$(PrBranch)-$(Build.BuildId)"
            -AuthToken "$(azuresdk-github-pat)"
            -PRTitle "$(PrTitle)-generated-from-$(Build.DefinitionName)-$(Build.BuildId)"
            -PRBody "$(GeneratedSDKInformation)"
            -OpenAsDraft $true